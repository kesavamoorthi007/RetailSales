@model RetailSales.Models.SalesInvoice
@{
    ViewData["Title"] = "Sales Invoice";
}
<head>
    <link rel="stylesheet" href="~/css/bootstrap-toggle.min.css">
</head>
<style>
    .mandatory {
        color: red;
        position: relative;
        top: 2px;
        left: 5px;
    }

    .toggle {
        min-width: 15px !important; /* Adjust the width */
    }

    .toggle-on, .toggle-off {
        padding: 2px 6px !important; /* Adjust padding */
        font-size: 25px !important; /* Adjust font size */
        background-color: white;
    }
</style>
<script type="text/javascript">
    @if (TempData["notice"] != null)
    {
        @:alert('@TempData["notice"]');
    }
</script>
<div style="height:25px;"></div>
<div class="row wrapper border-bottom page-heading">
    <div class="col-lg-12">

        <ol class="breadcrumb">
            <li class="active"> <strong>Sales Return </strong> </li>
        </ol>
    </div>
</div>
<div style="height:25px;"></div>
<div class="wrapper-content ">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="widgets-container">
                    @using (Html.BeginForm("ViewSalesReturn", "SalesInvoice", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        <form>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">

                                        <label for="inputName3" class="col-sm-4 control-label"><strong>Invoice No :</strong><label class="Mandatory"></label></label>
                                        
                                            @Html.HiddenFor(C => C.ID)
                                            @Html.DisplayFor(C => C.InvoiceNo)
                                        
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="inputName3" class="col-sm-4 control-label"><strong>Invoice Date :</strong><label class="Mandatory"></label></label>

                                        
                                            @Html.DisplayFor(C => C.InvoiceDate)
                                        

                                    </div>
                                </div>
                            </div>

                            <div style="height:30px;"></div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">

                                        <label for="inputName3" class="col-sm-4 control-label"><strong>Customer Name :</strong><label class="Mandatory"></label></label>
                                        
                                            @Html.DisplayFor(C => C.Customer)
                                        
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="inputName3" class="col-sm-4 control-label"><strong>Address :</strong><label class="Mandatory"></label></label>

                                        
                                            @Html.DisplayFor(C => C.Address)
                                        

                                    </div>
                                </div>
                            </div>
                            <div style="height:30px;"></div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">

                                        <label for="inputName3" class="col-sm-4 control-label"><strong>Phone No :</strong><label class="Mandatory"></label></label>
                                        
                                            @Html.DisplayFor(C => C.Mobile)
                                        
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="inputName3" class="col-sm-4 control-label">
                                            <strong>Return Type :</strong>
                                            <label class="mandatory"></label>
                                        </label>
                                        
                                            
                                                @Html.RadioButtonFor(C => C.Return, "Cash", new { @TabIndex = 2, @id = "Cash", @name = "Cash" })
                                                <label for="Cash" id="mt-radio">Cash</label>&emsp;

                                                @Html.RadioButtonFor(C => C.Return, "CreditNote", new { @TabIndex = 3, @id = "Credit", @name = "Credit" })
                                                <label for="Credit" id="mt-radio">Credit Note</label>&emsp;

                                                @Html.RadioButtonFor(C => C.Return, "Product", new { @TabIndex = 4, @id = "Product", @name = "Product" })
                                                <label for="Product" id="mt-radio">Product</label>

                                                <br />
                                            
                                        
                                    </div>
                                </div>
                            </div>
                            

                            <div style="height:30px;"></div>
                            <div class="row">
                                <div class="col-lg-12" style="overflow-x:scroll; min-width:300px; min-height:100px;">

                                    <table id="dataTable" class="table table-striped table-hover">
                                        <thead>
                                            <tr>
                                                <th>Product Category</th>
                                                <th>Product Name</th>
                                                <th>Variant</th>
                                                <th>HSN</th>
                                                <th> UOM </th>
                                                @* <th> BIN No </th> *@
                                                <th> Qty </th>
                                                <th> Return Qty </th>
                                                <th> Dest UOM </th>
                                                <th> CF </th>
                                                <th> CF Qty </th>
                                                <th>Rate (₹)</th>
                                                <th>Amount (₹)</th>
                                                <th> Discount (%) </th>
                                                <th> Discount (₹) </th>
                                                <th>Total Amount (₹)</th>
                                            </tr>
                                        </thead>

                                        <tbody id="tbBooks">
                                            @{
                                                int i = 0;

                                                foreach (var item in Model.SalesInvoiceLst.ToList())
                                                {

                                                    <tr id="trBook@(i)" class="chkitemlst";>
                                                        <td>@Html.DisplayFor(o => o.SalesInvoiceLst[i].Item)</td>
                                                        <td>@Html.DisplayFor(o => o.SalesInvoiceLst[i].Product)</td>
                                                        <td>@Html.DisplayFor(o => o.SalesInvoiceLst[i].Varient)</td>
                                                        <td>@Html.DisplayFor(o => o.SalesInvoiceLst[i].Hsn)</td>
                                                        <td>@Html.DisplayFor(o => o.SalesInvoiceLst[i].UOM)</td>
                                                        <td>
                                                            @Html.DisplayFor(o => o.SalesInvoiceLst[i].Qty)
                                                            @Html.HiddenFor(o => o.SalesInvoiceLst[i].Qty, new { @id = "txtQty" + i })
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(o => o.SalesInvoiceLst[i].ReturnQty, new { @id = "txtReturnQty" + i, @class = "form-control", style = "width: 80px;", type = "number", onkeydown = "return isNumeric2(event.keyCode,this.value)", @onkeyup = "changeQty(this," + i + ")" })
                                                        </td>
                                                        <td>@Html.DisplayFor(o => o.SalesInvoiceLst[i].DestUOM)</td>
                                                        <td>
                                                            @Html.TextBoxFor(o => o.SalesInvoiceLst[i].CF, new { @id = "txtCF" + i, @class = "form-control", style = "width: 70px;", @readonly = "readonly", @onkeyup = "changeCF(this.value," + i + ")" })
                                                            @Html.HiddenFor(o => o.SalesInvoiceLst[i].CF)
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(o => o.SalesInvoiceLst[i].CfQty, new { @id = "txtCfQty" + i, @class = "form-control", style = "width: 70px;", @readonly = "readonly", onkeydown = "return isNumeric2(event.keyCode,this.value)" })
                                                            @Html.HiddenFor(o => o.SalesInvoiceLst[i].CfQty)
                                                        </td>
                                                        <td style="text-align: right;">
                                                            @Html.TextBoxFor(o => o.SalesInvoiceLst[i].Rate, new { @id = "txtRate" + i, @class = "form-control", style = "width: 120px; text-align: right;", @onkeyup = "changeQty(this," + i + ")" })
                                                            @Html.HiddenFor(o => o.SalesInvoiceLst[i].Rate)
                                                        </td>
                                                        <td style="text-align: right;">
                                                            @Html.TextBoxFor(o => o.SalesInvoiceLst[i].Amount, new { @id = "txtAmount" + i, @class = "form-control", style = "width: 120px; text-align: right;", @readonly = "readonly" })
                                                            @Html.HiddenFor(o => o.SalesInvoiceLst[i].Amount)
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(o => o.SalesInvoiceLst[i].DiscPer, new { @id = "txtDiscPer" + i, @class = "form-control", onkeydown = "return isNumeric2(event.keyCode,this.value)", style = "width: 120px;", @onkeyup = "changeDisc(this," + i + ")" })
                                                            @Html.HiddenFor(o => o.SalesInvoiceLst[i].DiscPer)
                                                        </td>
                                                        <td style="text-align: right;">
                                                            @Html.TextBoxFor(o => o.SalesInvoiceLst[i].Discount, new { @id = "txtDiscAmount" + i, @class = "form-control", onkeydown = "return isNumeric2(event.keyCode,this.value)", style = "width: 120px; text-align: right;", @readonly = "readonly", @onkeyup = "changeQty(this," + i + ")" })
                                                            @Html.HiddenFor(o => o.SalesInvoiceLst[i].Discount)
                                                        </td>
                                                        <td style="text-align: right;">
                                                            @Html.TextBoxFor(o => o.SalesInvoiceLst[i].Total, new { @id = "txtTotal" + i, @class = "form-control", style = "width: 120px; text-align: right;", onkeydown = "return isNumeric2(event.keyCode,this.value)", @onkeyup = "changeQty(this," + i + ")", @readonly = "readonly" })
                                                            @Html.HiddenFor(o => o.SalesInvoiceLst[i].Total)
                                                        </td>


                                                    </tr>
                                                    //i = i + 1;
                                                    i++;
                                                }
                                            }

                                        </tbody>
                                    </table>
                                </div>
                            </div>
                                      
                                    
                            <div style="height:30px;"></div>
                            <div class="row">

                                <div class="col-md-4" style="overflow-x:scroll; min-width:300px; min-height:300px;">

                                    <table class="table table-striped table-hover" id="dataTable">
                                        <thead>
                                        </thead>
                                        <tbody id="tbBooks">
                                            @{
                                                <tr>

                                                    <th>GROSS (₹)</th>
                                                    <td>
                                                        @Html.TextBoxFor(o => o.Gross, new { @id = "txtGross", @class = "form-control", style = "width: 150px;text-align:right", @readonly = "readonly" })
                                                        @Html.HiddenFor(C => C.Gross)
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <th>DISCOUNT (₹)</th>
                                                    <td>
                                                        @Html.TextBoxFor(o => o.Disc, new { @id = "txtDisc", @class = "form-control", style = "width: 150px;text-align:right", @onkeyup = "changeDisTot(this)" })
                                                        @Html.HiddenFor(C => C.Disc)
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <th>FREIGHT (₹)</th>
                                                    <td>
                                                        @Html.TextBoxFor(o => o.Frieghtcharge, new { @id = "txtFrieghtcharge", @class = "form-control", onkeydown = "return isNumeric2(event.keyCode,this.value)", style = "width: 150px;text-align:right", @onkeyup = "changeFrightTot(this)" })
                                                        @Html.HiddenFor(C => C.Frieghtcharge)
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <th> ROUND OFF</th>
                                                    <td>
                                                        <div style="display: flex; align-items: center; gap: 10px;">

                                                            <input type="checkbox" data-toggle="toggle" id="toggle-two" data-on="-" data-off="+" data-width="60" data-onstyle="secondary" data-offstyle="secondary" onclick="changeTot(this)">

                                                            @Html.TextBoxFor(o => o.Round, new { @id = "txtRound", @class = "form-control", onkeydown = "return isNumeric2(event.keyCode,this.value)", style = "width: 80px;text-align:right" })
                                                            @Html.HiddenFor(C => C.Round)
                                                        </div>
                                                        
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <th> TOTAL (₹)</th>
                                                    <td>
                                                        @Html.TextBoxFor(o => o.Net, new { @id = "txtNet", @class = "form-control", onkeydown = "return isNumeric2(event.keyCode,this.value)", style = "width: 150px;text-align:right", @readonly = "readonly" })
                                                        @Html.HiddenFor(C => C.Net)
                                                        <input type="hidden" id="hidnet" />
                                                    </td>


                                                </tr>

                                            }


                                        </tbody>
                                    </table>
                                </div>
                                <div class="col-md-8">
                                    <div class="tabs-container">
                                        @* <ul class="nav nav-pills nav-fill">
                                            <li class="active"><a href="#tab-1" data-toggle="tab">Despatch Address</a></li>
                                            <li class="active"><a href="#tab-1" data-toggle="tab">Details</a></li>


                                        </ul> *@
                                        <div class="tab-content">


                                            <div class="tab-pane active" id="tab-1">

                                                <div class="row">
                                                    <div class="col-md-12">
                                                        <div class="form-group">
                                                            <div class="tab-pane active" id="tab-1">
                                                                <div class="row">
                                                                    <div class="col-md-12">
                                                                        <div class="form-group">
                                                                            <br />  <label for="inputName3" class="col-sm-4 control-label"><strong>Amount in Words :</strong><label class="Mandatory"></label></label>

                                                                            @Html.TextBoxFor(C => C.Amountinwords, new { @id = "Amountinwords", @class = "form-control", @TabIndex = 2, onkeydown = "return isNumeric2(event.keyCode,this.value)", @readonly = true })
                                                                            @Html.HiddenFor(C => C.Amountinwords)
                                                                            

                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class="row">
                                                                    <div class="col-md-12">
                                                                        <div class="form-group">

                                                                            <br /> <label for="inputName3" class="col-sm-4 control-label"><strong>Narration :</strong><label class="Mandatory"></label></label>
                                                                            @Html.TextAreaFor(C => C.Remarks, new { @id = "txtNarration", @class = "form-control", @value = "Invoice to", @TabIndex = 1 })
                                                                            @Html.HiddenFor(C => C.Remarks)
                                                                            
                                                                        </div>
                                                                    </div>

                                                                </div>
                                                                @*1st tab*@
                                                            </div>
                                                            @*1st tab*@

                                                        </div>


                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>


                            <div style="height:30px;"></div>
                            <div class="col-lg-8"></div>
                            <button type="submit" class="btn btn-success" type="button" id="btnSave">Sales Return</button>
                            <button class="btn btn-danger" type="button" causesvalidation="false" onclick="location.href='@Url.Action("ListSalesInvoice", "SalesInvoice")'">Cancel</button>


                        </form>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function changeCF(_this, i) {
         var qty =document.getElementById("txtReturnQty" + i).value;
         var cf =document.getElementById("txtCF" + i).value;


         if (qty == "")
                qty = 0;

            if (cf == "")
                cf = 0;

                 var cqty = eval(cf) * eval(qty);
                   document.getElementById("txtCfQty" + i).value = cqty.toFixed(2);

     }
     function changeQty(_this, i) {
        try {
            let totamt = 0;
            let totamount = 0;
            let disttotamt = 0;
            let j = 0;

            let qty = parseFloat(document.getElementById("txtQty" + i).value) || 0;
            let rqty = parseFloat(document.getElementById("txtReturnQty" + i).value) || 0;
            let up = parseFloat(document.getElementById("txtRate" + i).value) || 0;
            var discper = parseFloat(document.getElementById("txtDiscPer" + i).value) || 0;
            let disc = parseFloat(document.getElementById("txtDiscAmount" + i).value) || 0;
            let cf = parseFloat(document.getElementById("txtCF" + i).value) || 0;

            // Check if quantity exceeds stock
            if (rqty > qty) {
                alert("Entered Qty is higher than Actual Qty");
                rqty = 0;
                rqty.value = "0";

            }

            let amount = rqty * up;
            let cfQty = rqty * cf;
            //let totalAfterDisc = amount - disc;

            // Update calculated values to UI
            document.getElementById("txtAmount" + i).value = amount.toFixed(2);
            document.getElementById("txtCfQty" + i).value = cfQty;
            //document.getElementById("txtTotal" + i).value = totalAfterDisc.toFixed(2);
            var tottax = amount;

            // Ensure txtDiscAmount is updated correctly if nothing is entered
            if (isNaN(discper) || discper === 0) {  // **Added validation to reset discount when blank**
                document.getElementById("txtDiscAmount" + i).value = "0.00";
            } else {
                if(discper < 100){
                    Disc = (discper / 100) * amount;
                    document.getElementById("txtDiscAmount" + i).value = Disc.toFixed(2);  // **Fixed formatting issue**
                    tottax -= Disc;
                }
                else{
                    alert("Disc % Should not exceed 100");
                    document.getElementById("txtDiscPer" + i).value = "0";
                    document.getElementById("txtDiscAmount" + i).value = "0";
                    document.getElementById("txtAmount" + i).value = amount.toFixed(2);
                }
            }
            document.getElementById("txtTotal" + i).value = tottax.toFixed(2);
            // Loop through all visible item rows
            $('tr.chkitemlst').each(function () {
                if ($(this).css('display') !== 'none') {
                    let amt = parseFloat($(this).find('[id^="txtAmount"]').val()) || 0;
                    let total = parseFloat($(this).find('[id^="txtTotal"]').val()) || 0;
                    let discount = parseFloat($(this).find('[id^="txtDiscAmount"]').val()) || 0;

                    totamt += amt;
                    totamount += total;
                    disttotamt += discount;
                }
                j++;
            });

            // Rounding and summary updates
            let roundamount = Math.round(totamount);
            let round = roundamount - totamount;

            document.getElementById("txtGross").value = totamt.toFixed(2);
            document.getElementById("txtDisc").value = Disc.toFixed(2);
            document.getElementById("txtNet").value = roundamount.toFixed(2);
            document.getElementById("hidnet").value = roundamount.toFixed(2);
            document.getElementById("txtRound").value = round.toFixed(2);
            document.getElementById("Amountinwords").value = withDecimal(roundamount.toFixed(2));

        } catch (ex) {
            alert(ex.message);
        }
    }
    function changeDisc(_this, i) {
        try {
            var tot = 0;
            var totfrieght = 0;
            var cgsttotamt = 0;
            var sgsttotamt = 0;
            var igsttotamt = 0;
            var disttotamt = 0;
            var totamt = 0;
            var qty = parseFloat(document.getElementById("txtReturnQty" + i).value) || 0;
            var discper = parseFloat(document.getElementById("txtDiscPer" + i).value) || 0;
            var up = parseFloat(document.getElementById("txtRate" + i).value) || 0;
            var Disc = parseFloat(document.getElementById("txtDiscAmount" + i).value) || 0;
            var CF = parseFloat(document.getElementById("txtCF" + i).value) || 0;

            // Calculate total amount based on quantity and rate
            tot = qty * up;

            // Calculate CF quantity
            var cfqty = qty * CF;

            // Update the fields for Amount and CFQty
            document.getElementById("txtAmount" + i).value = tot.toFixed(2);
            document.getElementById("txtCfQty" + i).value = cfqty.toFixed(2);

            var tottax = tot;

            // Ensure txtDiscAmount is updated correctly if nothing is entered
            if (isNaN(discper) || discper === 0) {  // **Added validation to reset discount when blank**
                document.getElementById("txtDiscAmount" + i).value = "0.00";
            } else {
                if(discper < 100){
                    Disc = (discper / 100) * tot;
                    document.getElementById("txtDiscAmount" + i).value = Disc.toFixed(2);  // **Fixed formatting issue**
                    tottax -= Disc;
                }
                else{
                    alert("Disc % Should not exceed 100");
                    document.getElementById("txtDiscPer" + i).value = "0";
                    document.getElementById("txtDiscAmount" + i).value = "0";
                    document.getElementById("txtAmount" + i).value = tot.toFixed(2);
                }
            }
            document.getElementById("txtTotal" + i).value = tottax.toFixed(2);

            // Calculate totals for all rows
            var totalAmount = 0;
            var totalCGST = 0;
            var netamt = 0;
            var totalSGST = 0;
            var totalIGST = 0;
            var totalDisc = 0;
            var j = 0;

            $('tr.chkitemlst').each(function () {
                if ($(this).css('display') !== 'none') {
                    var amt = parseFloat($(this).find('#txtAmount' + j).val()) || 0;
                    totalAmount += amt;

                    var tamt = parseFloat($(this).find('#txtTotal' + j).val()) || 0;
                    netamt += tamt;

                    var dist = parseFloat($(this).find('#txtDiscAmount' + j).val()) || 0;
                    totalDisc += dist;
                }
                j += 1;
            });

            // Calculate rounded amount and update fields
            var roundedAmount = Math.round(netamt.toFixed(2));
            var roundDiff = roundedAmount - netamt;

            document.getElementById("txtGross").value = totalAmount.toFixed(2);
            document.getElementById("txtNet").value = roundedAmount.toFixed(2);
            document.getElementById("hidnet").value = netamt.toFixed(2);
            document.getElementById("txtRound").value = roundDiff.toFixed(2);
            document.getElementById("txtDisc").value = totalDisc.toFixed(2);

            // Convert total amount to words and display
            document.getElementById("Amountinwords").value = withDecimal(roundedAmount.toFixed(2));

        } catch (ex) {
            alert("Error: " + ex.message);
        }
    }
    function changeDisTot(_this) {
        try {
            var GTot = 0;
            var j = 0;
            var qty = 0;
            var tot = 0;
            var totfrieght = 0;
            var cgsttotamt = 0;
            var sgsttotamt = 0;
            var igsttotamt = 0;
            var disttotamt = 0;
            var rej = 0;
            var totdis = 0;
            var tpknc = 0;
            var tochr = 0;
            var tsdis = 0;
            var totamt = 0;
            var totamount = 0;

            var Disc = document.getElementById("txtDisc").value || 0;

            var tot = document.getElementById("hidnet").value || 0;


            if (Disc == "")
                Disc = 0;

            if (tot == "")
                tot = 0;


            var rej = eval(tot) - eval(Disc) ;
            document.getElementById("txtNet").value = rej.toFixed(2);


            var roundamount = Math.round(rej);

            var round = eval(roundamount) - eval(rej);




            document.getElementById("txtNet").value = roundamount.toFixed(2);
            document.getElementById("hidnet").value = rej.toFixed(2);


            document.getElementById("txtRound").value = round.toFixed(2);

            document.getElementById("Amountinwords").value = withDecimal(roundamount.toFixed(2));


        }
        catch (ex) {
            alert(ex.message);
        }
    }
    function changeFrightTot(_this) {
        try {
            var GTot = 0;
            var j = 0;
            var qty = 0;
            var tot = 0;
            var totfrieght = 0;
            var cgsttotamt = 0;
            var sgsttotamt = 0;
            var igsttotamt = 0;
            var disttotamt = 0;
            var rej = 0;
            var totdis = 0;
            var tpknc = 0;
            var tochr = 0;
            var tsdis = 0;
            var totamt = 0;
            var totamount = 0;

            var Fri = document.getElementById("txtFrieghtcharge").value || 0;

            var tot = document.getElementById("txtGross").value || 0;
            var Disc = document.getElementById("txtDisc").value || 0;

            if (Fri == "")
                Fri = 0;

            if (tot == "")
                tot = 0;

            if (Disc == "")
                Disc = 0;

            var rej = eval(tot) + eval(Fri) - eval(Disc);
            //document.getElementById("txtNet").value = rej.toFixed(2);


            var roundamount = Math.round(rej);

            var round = eval(roundamount) - eval(rej);




            document.getElementById("txtNet").value = roundamount.toFixed(2);
            document.getElementById("hidnet").value = rej.toFixed(2);


            document.getElementById("txtRound").value = round.toFixed(2);

            document.getElementById("Amountinwords").value = withDecimal(roundamount.toFixed(2));


        }
        catch (ex) {
            alert(ex.message);
        }
    }
    function changeTot(element) {
        var isChecked = $(element).prop('checked');
        var symbol = isChecked ? '-' : '+';
        var round = document.getElementById("txtRound").value;
        round = round.startsWith('-') ? round.substring(1) : round;
        var net = document.getElementById("txtNet").value;

        var total=0;
     if(symbol=="+")
     {
            total = eval(net) + eval(round);

     }
        if (symbol == "-") {
            total = eval(net) - eval(round);

        }
        document.getElementById("txtNet").value = total.toFixed(2);

        //$('#toggle-state').text(symbol);
    }

    $(document).ready(function () {
        $('#toggle-two').change(function () {
            changeTot(this);
        });
    });
    function roundtorupee(amt) {
        if (amt - round_decimals(amt, 0) > 0.5)
            return pad_with_zeros(round_decimals(amt + 1, 0));
        return pad_with_zeros(round_decimals(amt, 0));
    }
    function convertNumberToWords(amount) {
        var words = new Array();
        words[0] = '';
        words[1] = 'One';
        words[2] = 'Two';
        words[3] = 'Three';
        words[4] = 'Four';
        words[5] = 'Five';
        words[6] = 'Six';
        words[7] = 'Seven';
        words[8] = 'Eight';
        words[9] = 'Nine';
        words[10] = 'Ten';
        words[11] = 'Eleven';
        words[12] = 'Twelve';
        words[13] = 'Thirteen';
        words[14] = 'Fourteen';
        words[15] = 'Fifteen';
        words[16] = 'Sixteen';
        words[17] = 'Seventeen';
        words[18] = 'Eighteen';
        words[19] = 'Nineteen';
        words[20] = 'Twenty';
        words[30] = 'Thirty';
        words[40] = 'Forty';
        words[50] = 'Fifty';
        words[60] = 'Sixty';
        words[70] = 'Seventy';
        words[80] = 'Eighty';
        words[90] = 'Ninety';
        amount = amount.toString();
        var atemp = amount.split(".");
        var number = atemp[0].split(",").join("");
        var n_length = number.length;
        var words_string = "";
        if (n_length <= 9) {
            var n_array = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0);
            var received_n_array = new Array();
            for (var i = 0; i < n_length; i++) {
                received_n_array[i] = number.substr(i, 1);
            }
            for (var i = 9 - n_length, j = 0; i < 9; i++, j++) {
                n_array[i] = received_n_array[j];
            }
            for (var i = 0, j = 1; i < 9; i++, j++) {
                if (i == 0 || i == 2 || i == 4 || i == 7) {
                    if (n_array[i] == 1) {
                        n_array[j] = 10 + parseInt(n_array[j]);
                        n_array[i] = 0;
                    }
                }
            }
            value = "";
            for (var i = 0; i < 9; i++) {
                if (i == 0 || i == 2 || i == 4 || i == 7) {
                    value = n_array[i] * 10;
                } else {
                    value = n_array[i];
                }
                if (value != 0) {
                    words_string += words[value] + " ";
                }
                if ((i == 1 && value != 0) || (i == 0 && value != 0 && n_array[i + 1] == 0)) {
                    words_string += "Crores ";
                }
                if ((i == 3 && value != 0) || (i == 2 && value != 0 && n_array[i + 1] == 0)) {
                    words_string += "Lakhs ";
                }
                if ((i == 5 && value != 0) || (i == 4 && value != 0 && n_array[i + 1] == 0)) {
                    words_string += "Thousand ";
                }
                if (i == 6 && value != 0 && (n_array[i + 1] != 0 && n_array[i + 2] != 0)) {
                    words_string += "Hundred and ";
                } else if (i == 6 && value != 0) {
                    words_string += "Hundred ";
                }
            }
            words_string = words_string.split("  ").join(" ");
        }
        return words_string;
    }
    function withDecimal(n) {
          var nums = n.toString().split('.')
          var whole = convertNumberToWords(nums[0])
          if (nums.length == 2) {
              var fraction = convertNumberToWords(nums[1])
              if(nums[1]=="00")
              {
                  return whole + ' ' + fraction + 'Rupees Only ';
              }
            else{
                return whole + ' ' + fraction + 'Paise Only ';
            }
          } else {
            return whole + 'Rupees Only ';
          }
    }

    $(document).ready(function () {
        $('#btnSave').click(function (e) {
            var isValid = true;

            if (document.getElementById("mt-radio").value == "") {
                isValid = false;
                $(mt-radio).css({
                    "border": "1px solid red",
                    "background": "#FFCECE"
                });

                alert("Please Enter Return Type");
                return false;
            }
            else {
                $(mt-radio).css({
                    "border": "",
                    "background": ""
                });
            }

            var j = 0;
            $('tr.chkitemlst').each(function () {
                if ($(this).css('display') !== 'none') {

                    if ($(this).find('#txtReturnQty' + j.toString()).val() == "" || $(this).find('#txtReturnQty' + j.toString()).val() == "0") {
                        isValid = false;
                        $(this).find('#txtReturnQty' + j.toString()).css({
                            "border": "1px solid red",
                            "background": "#FFCECE"
                        });

                        alert("Please Enter Return Qty");
                        $(this).find('#txtReturnQty' + j.toString()).focus();
                        return false;

                    }
                    else {
                        $(this).find('#txtReturnQty' + j.toString()).css({
                            "border": "",
                            "background": ""
                        });
                    }


                }
                j += 1;
            });

            if (isValid == false)
                e.preventDefault();
        });

    });
</script>
<script src="~/js/bootstrap-toggle.min.js"></script>
<script>
    (function () {
        $('#toggle-two').bootstrapToggle();
    });
</script>
