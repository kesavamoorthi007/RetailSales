@model RetailSales.Models.SalesCreditNote

@{
    ViewData["Title"] = "Credit Note";
}
<style>
    .mandatory {
        color: red;
        position: relative;
        top: 2px;
        left: 5px;
    }
</style>
<script type="text/javascript">
    @if (TempData["notice"] != null)
    {
        @:alert('@TempData["notice"]');
    }
</script>
<div style="height:20px;"></div>
<div class="row wrapper border-bottom page-heading">
    <div class="col-lg-12">

        <ol class="breadcrumb">
            <li class="active"> <strong>Sales Credit Note</strong> </li>
        </ol>
    </div>
</div>
<div class="wrapper-content ">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="widgets-container">
                    @using (Html.BeginForm("SalesCreditNote", "SalesCreditNote", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        <form>
                            <br />
                            <div style="height:20px;"></div>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group">

                                        <label for="inputName3" class="col-sm-4 control-label">Voucher No<label class="mandatory"></label></label>
                                        <div class="col-sm-12">

                                            @Html.TextBoxFor(C => C.VocNo, new { @id = "txtVocNo", @class = "form-control", @TabIndex = 2, @readonly = "readonly" })
                                            @Html.HiddenFor(C => C.ID)


                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">

                                        <label for="inputName3" class="col-sm-4 control-label">Voucher Date<label class="mandatory"></label></label>
                                        <div class="col-sm-12">
                                            <div class="input-group date form_date col-sm-8" data-date="" data-date-format="dd-M-yyyy">
                                                @Html.TextBoxFor(C => C.VocDate, new { @id = "txtVocDate", @class = "form-control", @TabIndex = 1, @size = "32", style = "width: 170px", @readonly = "readonly" })
                                                <span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>                               
                            </div>

                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group">

                                        <br /><label for="inputName3" class="col-sm-4 control-label">Invoice No<label class="mandatory"></label></label>
                                        <div class="col-sm-12">
                                            @Html.TextBoxFor(C => C.InvNo, new { @id = "txtInvNo", @class = "form-control", @TabIndex = 2, @readonly = "readonly" })

                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">

                                        <br /><label for="inputName3" class="col-sm-4 control-label">Invoice Date<label class="mandatory"></label></label>
                                        <div class="col-sm-12">
                                            <div class="input-group date form_date col-sm-8" data-date="" data-date-format="dd-M-yyyy">
                                                @Html.TextBoxFor(C => C.InvDate, new { @id = "txtInvDate", @class = "form-control", @TabIndex = 1, @size = "32", style = "width: 170px", @readonly = "readonly" })
                                                <span class="input-group-addon"><span class="glyphicon glyphicon-calendar"></span></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>
                            

                            <div style="height:20px;"></div>
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="btn-group">
                                        <p style="float:right;"> <input type="button" value="Add Row" onclick="AddRow()" class="btn btn-primary" /></p>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-12" style="overflow-x:scroll; min-width:300px; min-height:300px;">


                                    <table class="table table-striped table-hover" id="dataTable">
                                        <thead>
                                            <tr>

                                                <th>DB/CR</th>
                                                <th>Account Name</th>
                                                <th>Debit Amount</th>
                                                <th>Credit Amount</th>
                                                <th>Balance</th>

                                            </tr>

                                        </thead>
                                        <tbody id="tbBooks">
                                            @{

                                                int i = 0;

                                                foreach (var item in Model.SalesCreditNotelst.ToList())
                                                {
                                                    <tr id="trBook@(i)" class="chkitemlst" style="height: 30px;border-bottom: 1px dashed #ddd;">



                                                        <td>
                                                            @Html.RadioButtonFor(o => o.SalesCreditNotelst[i].DBCR, "Dr", new { @id = "txtDBCR", @TabIndex = 2, @onchange = "changeentry(this.value," + i + ")" })
                                                            <label id="mt-radio">Dr</label>
                                                            @Html.RadioButtonFor(o => o.SalesCreditNotelst[i].DBCR, "Cr", new { @id = "txtDBCR", @TabIndex = 3, @onchange = "changeentry(this.value," + i + ")" })
                                                            <label id="mt-radio">Cr</label>
                                                        </td>
                                                        <td>
                                                            @Html.DropDownListFor(o => o.SalesCreditNotelst[i].AccName, Model.SalesCreditNotelst[i].AccNamelst, "---Please Select---", new { @class = "form-control _select newcss", @id = "txtAccName" + i, @onchange = "changeAcc_LedgerItem(this.value," + i + ")", style = "width: 200px;" })

                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(o => o.SalesCreditNotelst[i].DebitAmt, new { @id = "txtDebitAmt" + i, @class = "form-control", style = "width: 150px;text-align: right;", onkeydown = "return isNumeric2(event.keyCode,this.value)", @onkeyup = "totdeAmount(this," + i + ")" })
                                                        </td>

                                                        <td>
                                                            @Html.TextBoxFor(o => o.SalesCreditNotelst[i].CreditAmt, new { @id = "txtCreditAmt" + i, @class = "form-control", style = "width: 150px;text-align: right;", onkeydown = "return isNumeric2(event.keyCode,this.value)", @onkeyup = "totcrAmount(this," + i + ")" })

                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(o => o.SalesCreditNotelst[i].Balance, new { @id = "txtBalance" + i, @class = "form-control", style = "width: 150px;text-align: right;", onkeydown = "return isNumeric2(event.keyCode,this.value)", @readonly = "readonly" })

                                                        </td>

                                                        <td>
                                                            @Html.HiddenFor(o => o.SalesCreditNotelst[i].Isvalid, new { @id = "Isvalid" + i })
                                                            <img onclick="removeRow(@(i));" src="../Images/delete.png" style="cursor:pointer" /> <input name="SalesCreditNotelst.Index" type="hidden" value="@(i)" />
                                                        </td>


                                                    </tr>
                                                    i = i + 1;


                                                }
                                            }


                                        </tbody>




                                    </table>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">

                                    <div class="form-group">

                                        <br /><label for="inputName3" class="col-sm-4 control-label">Total Debit Amount<label class="mandatory"></label></label>
                                        <div class="col-sm-12">
                                            @Html.TextBoxFor(C => C.totdeb, new { @id = "totdeb", @class = "form-control", @TabIndex = 2, @readonly = "readonly" })

                                            <br />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">

                                    <div class="form-group">

                                        <br /><label for="inputName3" class="col-sm-4 control-label">Total Credit Amount<label class="mandatory"></label></label>
                                        <div class="col-sm-12">
                                            @Html.TextBoxFor(C => C.totcri, new { @id = "totcri", @class = "form-control", @TabIndex = 2, @readonly = "readonly" })
                                            <br />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-12">

                                    <div class="form-group">

                                        <br /><label for="inputName3" class="col-sm-2 control-label">Amount In Words<label class="mandatory"></label></label>
                                        <div class="col-sm-10">
                                            @Html.TextBoxFor(C => C.AmtWd, new { @id = "txtAmtWd", @class = "form-control", @TabIndex = 2, @readonly = "readonly" })
                                            <br />
                                        </div>
                                    </div>
                                </div>
                            </div>


                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <br /><label for="inputName3" class="col-sm-2 control-label">Narration</label>
                                        <div class="col-sm-10">
                                            @Html.TextAreaFor(C => C.Narr, new { @id = "txtNarr", @class = "form-control", @TabIndex = 2 })
                                            @Html.HiddenFor(C => C.ID)
                                            <br />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div style="height:30px;"></div>
                            <button type="submit" class="btn btn-success" id="btnSave">Submit</button>
                            <button class="btn btn-danger" type="button" causesvalidation="false" onclick="location.href='@Url.Action("ListSalesReturn", "SalesReturn")'">Cancel</button>
                        </form>
                    }
                </div>
            </div>
        </div>

    </div>
</div>

<script>

    $('.form_time').datetimepicker({
        weekStart: 1,
        todayBtn: 1,
        autoclose: 1,
        todayHighlight: 1,
        startView: 1,
        minView: 0,
        maxView: 1,
        forceParse: 0
    });

    $('.to_date').datetimepicker({
        //   language:  'fr',
        weekStart: 1,
        todayBtn: 1,
        autoclose: 1,
        todayHighlight: 1,
        startView: 2,
        minView: 2,
        endDate: new Date(),
        forceParse: 0

    });

    $('.form_date').datetimepicker({
        //   language:  'fr',
        weekStart: 1,
        todayBtn: 1,
        autoclose: 1,
        todayHighlight: 1,
        startView: 2,
        minView: 2,
        endDate: new Date(),
        forceParse: 0
    }).on('changeDate', function (selected) {
        var minDate = new Date(selected.date.valueOf());
        $('.to_date').datetimepicker('setStartDate', minDate);

    });
    function withDecimal(n) {
        var nums = n.toString().split('.')
        var whole = convertNumberToWords(nums[0])
        if (nums.length == 2) {
            var fraction = convertNumberToWords(nums[1])
            return whole + ' ' + fraction;
        } else {
            return whole;
        }
    }

    function convertNumberToWords(amount) {
        var words = new Array();
        words[0] = '';
        words[1] = 'One';
        words[2] = 'Two';
        words[3] = 'Three';
        words[4] = 'Four';
        words[5] = 'Five';
        words[6] = 'Six';
        words[7] = 'Seven';
        words[8] = 'Eight';
        words[9] = 'Nine';
        words[10] = 'Ten';
        words[11] = 'Eleven';
        words[12] = 'Twelve';
        words[13] = 'Thirteen';
        words[14] = 'Fourteen';
        words[15] = 'Fifteen';
        words[16] = 'Sixteen';
        words[17] = 'Seventeen';
        words[18] = 'Eighteen';
        words[19] = 'Nineteen';
        words[20] = 'Twenty';
        words[30] = 'Thirty';
        words[40] = 'Forty';
        words[50] = 'Fifty';
        words[60] = 'Sixty';
        words[70] = 'Seventy';
        words[80] = 'Eighty';
        words[90] = 'Ninety';
        amount = amount.toString();
        var atemp = amount.split(".");
        var number = atemp[0].split(",").join("");
        var n_length = number.length;
        var words_string = "";
        if (n_length <= 9) {
            var n_array = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0);
            var received_n_array = new Array();
            for (var i = 0; i < n_length; i++) {
                received_n_array[i] = number.substr(i, 1);
            }
            for (var i = 9 - n_length, j = 0; i < 9; i++, j++) {
                n_array[i] = received_n_array[j];
            }
            for (var i = 0, j = 1; i < 9; i++, j++) {
                if (i == 0 || i == 2 || i == 4 || i == 7) {
                    if (n_array[i] == 1) {
                        n_array[j] = 10 + parseInt(n_array[j]);
                        n_array[i] = 0;
                    }
                }
            }
            value = "";
            for (var i = 0; i < 9; i++) {
                if (i == 0 || i == 2 || i == 4 || i == 7) {
                    value = n_array[i] * 10;
                } else {
                    value = n_array[i];
                }
                if (value != 0) {
                    words_string += words[value] + " ";
                }
                if ((i == 1 && value != 0) || (i == 0 && value != 0 && n_array[i + 1] == 0)) {
                    words_string += "Crores ";
                }
                if ((i == 3 && value != 0) || (i == 2 && value != 0 && n_array[i + 1] == 0)) {
                    words_string += "Lakhs ";
                }
                if ((i == 5 && value != 0) || (i == 4 && value != 0 && n_array[i + 1] == 0)) {
                    words_string += "Thousand ";
                }
                if (i == 6 && value != 0 && (n_array[i + 1] != 0 && n_array[i + 2] != 0)) {
                    words_string += "Hundred and ";
                } else if (i == 6 && value != 0) {
                    words_string += "Hundred Only";
                }
            }
            words_string = words_string.split("  ").join(" ");
        }
        return words_string;
    }
    function totdeAmount(_this, i) {
        try {

            var tdr = 0;
            var j = 0;
            var tcr = 0;
            var dqty = 0;
            var cqty = 0;
            var tot = 0;
            $('tr.chkitemlst').each(function () {
                if ($(this).css('display') !== 'none') {
                    var dr = $(this).find('#txtDebitAmt' + j.toString()).val();

                    if (dr == "")
                        dr = 0;


                    tdr += eval(dr);




                }
                j += 1;
            });
            document.getElementById("totdeb").value = tdr.toFixed(2);

            document.getElementById("txtAmtWd").value = withDecimal(tdr.toFixed(2));
            // document.getElementById("txtAmtWd").value = withDecimal(tcr.toFixed(2));

        }
        catch (ex) {
            alert(ex.message);
        }

    }
    function totcrAmount(_this, i) {
        try {

            var tdr = 0;
            var j = 0;
            var tcr = 0;
            var dqty = 0;
            var cqty = 0;
            var tot = 0;
            $('tr.chkitemlst').each(function () {
                if ($(this).css('display') !== 'none') {

                    var cr = $(this).find('#txtCreditAmt' + j.toString()).val();

                    if (cr == "")
                        cr = 0;


                    tcr += eval(cr);



                }
                j += 1;
            });

            document.getElementById("totcri").value = tcr.toFixed(2);
            document.getElementById("txtAmtWd").value = withDecimal(tcr.toFixed(2));
            // document.getElementById("txtAmtWd").value = withDecimal(tcr.toFixed(2));

        }
        catch (ex) {
            alert(ex.message);
        }

    }

     function changeentry(typeid, i) {
        if (typeid == "Dr") {
            document.getElementById("txtCreditAmt" + i).readOnly = true;
            document.getElementById("txtDebitAmt" + i).readOnly = false;
        }

        else {
            document.getElementById("txtDebitAmt" + i).readOnly = true;
            document.getElementById("txtCreditAmt" + i).readOnly = false;
        }
    }

    function changeAcc_LedgerItem(ItemId, i) {
        $.ajax({
            url: 'GetLedgerDetails',
            data: { "ItemId": ItemId },
            type: "GET",
            success: function (result) {
                document.getElementById("txtBalance" + i).value = result.balance;


            },
            error: function () {
                alert("please Select Account Name");
            }
        });
    }

    $(document).ready(function () {
        $('#btnSave').click(function (e) {
            var isValid = true;

            //Grid validation
            var i = 0;
            $('tr.chkitemlst').each(function () {
                if ($(this).css('display') !== 'none') {




                    if ($(this).find('#txtAccName' + i.toString()).val() == "" || $(this).find('#txtAccName' + i.toString()).val() == "0") {
                        isValid = false;
                        $(this).find('#txtAccName' + i.toString()).css({
                            "border": "1px solid red",
                            "background": "#FFCECE"
                        });

                        alert("Please Select Account Name");
                        $(this).find('#txtAccName' + i.toString()).focus();
                        return false;

                    }
                    else {
                        $(this).find('#txtAccName' + i.toString()).css({
                            "border": "",
                            "background": ""
                        });
                    }
                }
                i += 1;
            });


            if (isValid == false)
                e.preventDefault();
        });

    });


    $(function () {
        $('._select').select2();
    });

    function removeRow(id) {
        var table = document.getElementById("dataTable");
        var rowCount = table.rows.length;
        var row = document.getElementById('trBook' + id);
        var j = 0;
        $('tr.chkitemlst').each(function () {
            if ($(this).css('display') !== 'none') {
                j += 1;
            }
        });
        if (j > 1) {
            row.style.display = "none";
            document.getElementById('Isvalid' + id).value = "N";
        }
        else {
            alert("Cannot delete all the rows.")
        }
    }
    function AddRow() {
        var opt = "";
        var remopt = "";
        var remsopt = "";
        $.ajax({
            type: "POST",
            url: 'GetDebJSON',
            success: function (data) {

                $.each(data, function () {
                    opt += "<option value=" + this.value + ">" + this.text + "</option>";
                });
                $.ajax({
                    type: "POST",
                    url: 'GetAccJSON',
                    success: function (data) {

                        $.each(data, function () {
                            remopt += "<option value=" + this.value + ">" + this.text + "</option>";
                        });

                        AppendRow(opt, remopt);
                    }
                })

            }
        })
    }
    $(document).ready(function () {
        $('#btnSave').click(function (e) {

            var tdr = 0;
            var tcr = 0;
            var isValid = true;
            var j = 0;
            $('tr.chkitemlst').each(function () {
                if ($(this).css('display') !== 'none') {
                    var dr = $(this).find('#totdeb' + j.toString()).val();
                    if (dr == "")
                        dr = 0;
                    var cr = $(this).find('#totcri' + j.toString()).val();
                    if (cr == "")
                        cr = 0;

                    tdr += eval(dr);
                    tcr += eval(cr);



                }
                j += 1;
            });
            if (eval(tdr) != eval(tcr)) {
                alert("Debit Amount and Credit Amount is not Eqval");
                return false;
            }

        });

    });





    $(function () {
        $('._select').select2();
    });
    function AppendRow(opt, remopt) {
        var index = $("#tbBooks").children("tr").length;

        var db = "<td><input id='txtDBCR" + index + "' name='CreditNotelst[" + index + "].DBCR' onchange='changeentry(this.value," + index + ")' type='radio' value='Dr'> <label id='mt-radio'>Dr</label><input  id='txtDBCR" + index + "' name='CreditNotelst[" + index + "].DBCR' onchange='changeentry(this.value," + index + ")' type = 'radio' value='Cr'> <label id='mt-radio'>Cr</label></td>";
        var acnam = "<td><select style = 'width: 200px;' class='form-control _select newcss' id='txtAccName" + index + "' name='CreditNotelst[" + index + "].AccName'onchange = 'changeAcc_LedgerItem(this.value," + index + ")'><option value=''>-- Please Select --</option>" + remopt + "</select></td>";
        var damo = "<td><input class='form-control' id='txtDebitAmt" + index + "' name='CreditNotelst[" + index + "].DebitAmt' onkeydown = 'return isNumeric2(event.keyCode,this.value)'  style='width: 150px;text-align: right;' type='text' onkeyup = 'totdeAmount(this," + index + ")' /></td>";
        var camo = "<td><input class='form-control' id='txtCreditAmt" + index + "' name='CreditNotelst[" + index + "].CreditAmt' onkeydown = 'return isNumeric2(event.keyCode,this.value)' style='width: 150px;text-align: right;' onkeyup = 'totcrAmount(this," + index + ")' type='text' /></td>";
        var bal = "<td><input class='form-control' id='txtBalance" + index + "' name='CreditNotelst[" + index + "].Balance'  style='width: 150px;text-align: right;' type='text' readonly='True' /></td>";



        var removeCell = "<td><input id='Isvalid" + index + "' name='CreditNotelst[" + index + "].Isvalid' type='hidden' value='Y'><img  src='../Images/delete.png' onclick='removeRow(" + index + ");'  style='cursor:pointer' /><input name='CreditNotelst.Index' type='hidden' value='" + index + "'  /></td>";

        var newRow = "<tr class='chkitemlst'  style='height: 30px;border-bottom: 1px dashed #ddd;'  id='trBook" + index + "'>" + db + acnam + damo + camo + bal + removeCell + "</tr>";
        $("#tbBooks").append(newRow);


        $(function () {
            $('._select').select2();
        });

        function withDecimal(n) {
            var nums = n.toString().split('.')
            var whole = convertNumberToWords(nums[0])
            if (nums.length == 2) {
                var fraction = convertNumberToWords(nums[1])
                return whole + ' ' + fraction;
            } else {
                return whole;
            }
        }


    }
    function convertNumberToWords(amount) {
        var words = new Array();
        words[0] = '';
        words[1] = 'One';
        words[2] = 'Two';
        words[3] = 'Three';
        words[4] = 'Four';
        words[5] = 'Five';
        words[6] = 'Six';
        words[7] = 'Seven';
        words[8] = 'Eight';
        words[9] = 'Nine';
        words[10] = 'Ten';
        words[11] = 'Eleven';
        words[12] = 'Twelve';
        words[13] = 'Thirteen';
        words[14] = 'Fourteen';
        words[15] = 'Fifteen';
        words[16] = 'Sixteen';
        words[17] = 'Seventeen';
        words[18] = 'Eighteen';
        words[19] = 'Nineteen';
        words[20] = 'Twenty';
        words[30] = 'Thirty';
        words[40] = 'Forty';
        words[50] = 'Fifty';
        words[60] = 'Sixty';
        words[70] = 'Seventy';
        words[80] = 'Eighty';
        words[90] = 'Ninety';
        amount = amount.toString();
        var atemp = amount.split(".");
        var number = atemp[0].split(",").join("");
        var n_length = number.length;
        var words_string = "";
        if (n_length <= 9) {
            var n_array = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0);
            var received_n_array = new Array();
            for (var i = 0; i < n_length; i++) {
                received_n_array[i] = number.substr(i, 1);
            }
            for (var i = 9 - n_length, j = 0; i < 9; i++, j++) {
                n_array[i] = received_n_array[j];
            }
            for (var i = 0, j = 1; i < 9; i++, j++) {
                if (i == 0 || i == 2 || i == 4 || i == 7) {
                    if (n_array[i] == 1) {
                        n_array[j] = 10 + parseInt(n_array[j]);
                        n_array[i] = 0;
                    }
                }
            }
            value = "";
            for (var i = 0; i < 9; i++) {
                if (i == 0 || i == 2 || i == 4 || i == 7) {
                    value = n_array[i] * 10;
                } else {
                    value = n_array[i];
                }
                if (value != 0) {
                    words_string += words[value] + " ";
                }
                if ((i == 1 && value != 0) || (i == 0 && value != 0 && n_array[i + 1] == 0)) {
                    words_string += "Crores ";
                }
                if ((i == 3 && value != 0) || (i == 2 && value != 0 && n_array[i + 1] == 0)) {
                    words_string += "Lakhs ";
                }
                if ((i == 5 && value != 0) || (i == 4 && value != 0 && n_array[i + 1] == 0)) {
                    words_string += "Thousand ";
                }
                if (i == 6 && value != 0 && (n_array[i + 1] != 0 && n_array[i + 2] != 0)) {
                    words_string += "Hundred and ";
                } else if (i == 6 && value != 0) {
                    words_string += "Hundred Only";
                }
            }
            words_string = words_string.split("  ").join(" ");
        }
        return words_string;
    }


    function changeAccName(id, i) {
        $.ajax({
            url: 'GetAccJSON',
            type: "GET",
            data: { 'id': id },
            cache: false,
            success: function (response) {
                PopulateDropDown("#txtAccName" + i, response);
            },
            error: function () {
                debugger;
                alert("Please Select Account Name");
            }
        });
    }



</script>
